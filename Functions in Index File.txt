File Loading & Data Processing Functions

  1. loadMazeFromCSV (async) - Line 949
    - Purpose: Loads maze data from CSV file for current level, with
  fallback to embedded data
    - Calls: parseMazeFromCSV()
  2. parseMazeFromCSV - Line 994
    - Purpose: Parses CSV text into maze structure with doors, paths,
  bonuses, and watering hole
    - Calls: None (utility function)
  3. loadWordListFromFile (async) - Line 1084
    - Purpose: Loads word-emoji pairs from level-specific Word-List.txt
  file
    - Calls: parseWordList()
  4. loadDistractorsFromFile (async) - Line 1122
    - Purpose: Loads distractor emojis from distractors.txt file
    - Calls: parseDistractors()
  5. parseDistractors - Line 1133
    - Purpose: Parses distractor text file into organized object by
  letter
    - Calls: None (utility function)
  6. parseWordList - Line 1150
    - Purpose: Parses word list text into word-emoji pair objects
    - Calls: None (utility function)

  Character & Asset Loading Functions

  7. loadCharacterSprites (async) - Line 1179
    - Purpose: Loads movement, game over and bonus sprites for selected
  character
    - Calls: configManager.loadConfig(),
  configManager.getCharacterConfig(), loadCharacterBonusSprite()
  8. loadCharacterBonusSprite - Line 1205
    - Purpose: Loads bonus sprite for character based on level
    - Calls: configManager.getCharacterConfig(),
  configManager.hasFeature(), configManager.getAvailableLevels()
  9. loadEmojiNames (async) - Line 1236
    - Purpose: Loads emoji name mappings from emoji-names.txt
    - Calls: None (file loading function)
  10. loadDigraphData (async) - Line 1260
    - Purpose: Loads digraph sound and emoji data from multiple files
    - Calls: loadEmojiNames()

  Animation & Sprite Management Functions

  11. getCelebrationConfig - Line 1307
    - Purpose: Gets celebration sprite configuration for a level
    - Calls: configManager.isConfigLoaded(),
  configManager.getCelebrationSpriteConfig()
  12. calculateFrameProperties - Line 1324
    - Purpose: Calculates frame dimensions and properties for sprite
  animations
    - Calls: getCelebrationConfig()
  13. loadCelebrationSprite - Line 1350
    - Purpose: Loads celebration sprite for specific difficulty level
    - Calls: configManager.getAvailableLevels(),
  configManager.getCharacterAssetPath()
  14. loadTextures - Line 1396
    - Purpose: Loads all required textures for current level dynamically
    - Calls: configManager.getRequiredTextures(),
  configManager.hasBonusFeatures()

  Audio & Speech Functions

  15. speakDigraph - Line 1519
    - Purpose: Text-to-speech for digraph sounds
    - Calls: window.speechSynthesis methods
  16. speakEmojiWord - Line 1538
    - Purpose: Text-to-speech for emoji word names
    - Calls: window.speechSynthesis methods

  Game State & Progress Functions

  17. unlockNextLevel - Line 1557
    - Purpose: Unlocks next level and saves progress to localStorage
    - Calls: configManager.getAvailableLevels(), localStorage methods
  18. resetProgress - Line 1566
    - Purpose: Debug function to reset level progress
    - Calls: localStorage methods

  UI Navigation Functions

  19. selectDifficulty (async) - Line 1573
    - Purpose: Sets difficulty mode and initializes game session
    - Calls: configManager.isConfigLoaded(),
  configManager.getCharacterConfig(), loadCharacterSprites(),
  showLevelSelection()
  20. showLevelSelection (async) - Line 1615
    - Purpose: Displays level selection screen
    - Calls: generateLevelButtons()
  21. generateLevelButtons (async) - Line 1620
    - Purpose: Dynamically creates level selection buttons
    - Calls: configManager.loadConfig(),
  configManager.getPlayableLevels(), selectLevel()
  22. selectLevel - Line 1681
    - Purpose: Selects and starts a specific level
    - Calls: loadCelebrationSprite(), initializeGame()
  23. backToDifficulty - Line 1694
    - Purpose: Returns from level selection to difficulty selection
    - Calls: DOM manipulation methods
  24. showCharacterSelection (async) - Line 1703
    - Purpose: Displays character selection screen
    - Calls: generateCharacterButtons()
  25. generateCharacterButtons (async) - Line 1708
    - Purpose: Dynamically creates character selection buttons with
  sprite previews
    - Calls: configManager.loadConfig(),
  configManager.getAvailableCharacters(),
  configManager.getCharacterConfig(), selectCharacter()
  26. selectCharacter - Line 1792
    - Purpose: Selects character and proceeds to difficulty selection
    - Calls: DOM manipulation methods
  27. backToCharacterSelection - Line 1806
    - Purpose: Returns from difficulty selection to character selection
    - Calls: DOM manipulation methods

  Debug Mode Functions

  28. toggleDebugMode (async) - Line 1822
    - Purpose: Toggles debug mode on/off and initializes debug interface
    - Calls: configManager.loadConfig(),
  generateDebugCharacterSelection(), generateDebugLevelButtons(),
  generateDebugCelebrationItems(), loadDebugCelebrationSprites(),
  updateDebugCurrentLevel()
  29. updateDebugCurrentLevel - Line 1847
    - Purpose: Updates debug display to show current level
    - Calls: DOM manipulation methods
  30. jumpToLevel - Line 1855
    - Purpose: Debug function to jump directly to any level
    - Calls: loadCharacterSprites(), loadCelebrationSprite(),
  initializeGame(), updateDebugCurrentLevel()
  31. closeDebugMode - Line 1910
    - Purpose: Closes debug mode interface
    - Calls: DOM manipulation methods
  32. generateDebugCharacterSelection (async) - Line 1917
    - Purpose: Creates character selection radio buttons for debug mode
    - Calls: configManager.getAvailableCharacters(),
  configManager.getCharacterConfig()
  33. reloadDebugCelebrationSprites - Line 1959
    - Purpose: Reloads celebration sprites in debug mode
    - Calls: loadDebugCelebrationSprites()
  34. loadDebugCelebrationSprites - Line 1966
    - Purpose: Loads celebration sprites for debug mode testing
    - Calls: configManager.getCharacterAssetPath(),
  configManager.getAvailableLevels()
  35. debugPlayCelebration - Line 2007
    - Purpose: Plays celebration animation in debug mode
    - Calls: animateDebugCelebration(), stopAllDebugAnimations()
  36. debugStopCelebration - Line 2015
    - Purpose: Stops specific celebration animation in debug mode
    - Calls: clearInterval()
  37. stopAllDebugAnimations - Line 2020
    - Purpose: Stops all running debug animations
    - Calls: clearInterval()
  38. generateDebugLevelButtons - Line 2029
    - Purpose: Creates level jump buttons for debug mode
    - Calls: configManager.getAvailableLevels(), jumpToLevel()
  39. generateDebugCelebrationItems - Line 2056
    - Purpose: Creates celebration preview items for debug mode
    - Calls: configManager.getAvailableLevels(), debugPlayCelebration(),
   debugStopCelebration()
  40. animateDebugCelebration - Line 2089
    - Purpose: Animates celebration sprites in debug mode
    - Calls: calculateFrameProperties(), setInterval()

  Core Game Functions

  41. resetGame - Line 2140
    - Purpose: Resets game state for new level or restart
    - Calls: updateScore(), DOM manipulation methods
  42. initializeGame (async) - Line 2196
    - Purpose: Initializes game with maze data and sets up player
  position
    - Calls: configManager.isConfigLoaded(), loadCharacterSprites(),
  configManager.getPuzzleConfig(), loadTextures(),
  loadCharacterBonusSprite(), loadMazeFromCSV(), loadWordListFromFile(),
   loadDistractorsFromFile(), loadDigraphData(), resetGame(), gameLoop()

  Score & Game State Functions

  43. updateScore - Line 2296
    - Purpose: Updates score display and handles game over conditions
    - Calls: gameOver(), DOM manipulation methods
  44. gameOver - Line 2316
    - Purpose: Handles game over state and shows game over screen
    - Calls: animateGameOver(), DOM manipulation methods
  45. animateGameOver - Line 2328
    - Purpose: Animates game over sprite
    - Calls: calculateFrameProperties(), setInterval()
  46. restartGame - Line 2379
    - Purpose: Restarts game from beginning (character selection)
    - Calls: showCharacterSelection(), DOM manipulation methods

  Movement & Collision Functions

  47. isOnPath - Line 2388
    - Purpose: Checks if coordinates are on a walkable path
    - Calls: None (utility function)
  48. isDoorBlocking - Line 2395
    - Purpose: Checks if a door is blocking player movement
    - Calls: None (utility function)
  49. checkHeartCollection - Line 2402
    - Purpose: Handles heart collectible collection
    - Calls: updateScore(), drawGame()
  50. checkBonusCollection - Line 2424
    - Purpose: Handles bonus collectible collection and starts rocket
  boost
    - Calls: startRocketCountdown(), drawGame()

  Rocket Boost System Functions

  51. startRocketCountdown - Line 2442
    - Purpose: Initiates rocket boost countdown and effects
    - Calls: updateRocketDisplay(), removeWalls(),
  startBoostTransition(), endBoostTransition()
  52. updateRocketDisplay - Line 2463
    - Purpose: Updates rocket boost timer display
    - Calls: DOM manipulation methods
  53. getBlockingDoor - Line 2505
    - Purpose: Returns door object that would block movement to
  coordinates
    - Calls: None (utility function)
  54. completeRocketBoostMovement - Line 2512
    - Purpose: Handles movement completion during rocket boost
    - Calls: endBoostTransition(), showCelebration()
  55. startBoostTransition - Line 2545
    - Purpose: Shows rocket boost start modal with animation
    - Calls: showBoostTransitionModal(), loadCharacterBonusSprite()
  56. showBoostTransitionModal - Line 2558
    - Purpose: Creates and displays boost transition modal
    - Calls: calculateFrameProperties(), animation functions, DOM
  manipulation
  57. endBoostTransition - Line 2691
    - Purpose: Shows rocket boost end modal and cleanup
    - Calls: showBoostTransitionModal(), restoreWalls(), DOM
  manipulation
  58. removeWalls - Line 2707
    - Purpose: Removes half of maze walls during rocket boost
    - Calls: None (maze manipulation)
  59. restoreWalls - Line 2737
    - Purpose: Restores maze walls after rocket boost ends
    - Calls: None (maze manipulation)

  Rendering Function

  60. drawGame - Line 2754
    - Purpose: Main rendering function for game canvas
    - Calls: Multiple texture rendering and animation functions

  Number Line Puzzle Functions

  61. initializeNumberLine - Line 3077
    - Purpose: Sets up number line puzzle interface
    - Calls: movePTToPosition(), numberLineKeyHandler(),
  checkNumberLineAnswer(), DOM manipulation
  62. initializeNumberLineLevel8 - Line 3187
    - Purpose: Sets up extended number line puzzle for level 8
    - Calls: movePTToPosition(), numberLineKeyHandler(), DOM
  manipulation
  63. movePTToPosition - Line 3279
    - Purpose: Moves PT character to specific position on number line
    - Calls: DOM manipulation, canvas drawing
  64. numberLineKeyHandler - Line 3385
    - Purpose: Handles keyboard input for number line puzzle
    - Calls: movePTToPosition()
  65. checkNumberLineAnswer - Line 3411
    - Purpose: Validates number line puzzle answer and shows result
    - Calls: checkAnswer(), DOM manipulation

  Puzzle Integration Functions

  66. showSimpleMathPuzzle - Line 3482
    - Purpose: Displays simple arithmetic puzzle modal
    - Calls: External SimpleMathPuzzle class methods
  67. showWordEmojiPuzzle - Line 3495
    - Purpose: Displays word-emoji matching puzzle modal
    - Calls: External WordEmojiPuzzle class methods
  68. showNumberLinePuzzle - Line 3508
    - Purpose: Displays number line puzzle modal
    - Calls: External NumberLinePuzzle class methods
  69. showDivisionPuzzle - Line 3520
    - Purpose: Displays division puzzle modal
    - Calls: External DivisionPuzzle class methods
  70. showDigraphPuzzle - Line 3532
    - Purpose: Displays digraph sounds puzzle modal
    - Calls: External DigraphPuzzle class methods
  71. showMultiplicationGroupsPuzzle - Line 3544
    - Purpose: Displays multiplication groups puzzle modal
    - Calls: External MultiplicationGroupsPuzzle class methods

  Answer Checking Function

  72. checkAnswer - Line 3556
    - Purpose: Universal answer checking function for all puzzle types
    - Calls: updateScore(), showCelebration(), unlockNextLevel(),
  showLevelSelection(), DOM manipulation

  Score Display Functions

  73. generateLevelScoreDisplay - Line 3642
    - Purpose: Creates score display showing performance across all
  levels
    - Calls: configManager.getAvailableLevels(), DOM manipulation
  74. showFinalScore - Line 3703
    - Purpose: Shows final score screen after completing all levels
    - Calls: generateLevelScoreDisplay(), DOM manipulation
  75. restartFromFinalScore - Line 3714
    - Purpose: Restarts game from final score screen
    - Calls: restartGame(), DOM manipulation
  76. showGameOverScore - Line 3731
    - Purpose: Shows score breakdown when game over occurs
    - Calls: generateLevelScoreDisplay(), DOM manipulation

  Celebration Functions

  77. animateCelebration - Line 3781
    - Purpose: Animates celebration sprite when level is completed
    - Calls: calculateFrameProperties(),
  configManager.getAnimationConfig(), requestAnimationFrame()
  78. playAgain - Line 3815
    - Purpose: Returns to level selection after celebration
    - Calls: showFinalScore(), showLevelSelection(), DOM manipulation
  79. showCelebration - Line 3831
    - Purpose: Shows celebration screen and animation
    - Calls: unlockNextLevel(), animateCelebration(),
  configManager.getPlayableLevels(), DOM manipulation

  Main Game Loop

  80. gameLoop - Line 3911
    - Purpose: Main game loop handling animation, collision detection,
  and rendering
    - Calls: drawGame(), requestAnimationFrame()

  Event Handlers (DOMContentLoaded)

  - Anonymous function - Line 3920
    - Purpose: Initializes game when page loads
    - Calls: gameLoop(), showCharacterSelection()

  Total: 80+ functions managing everything from asset loading to game
  mechanics, UI navigation, debug tools, and puzzle systems.